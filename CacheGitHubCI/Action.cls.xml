<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="CacheGitHubCI.Action">
<Super>%SerialObject</Super>
<TimeCreated>63599,80457.718702</TimeCreated>

<Property name="Type">
<Description>
Type of performed action.</Description>
<Type>%String</Type>
<Parameter name="VALUELIST" value=",classmethod,code"/>
</Property>

<Property name="Params">
<Description><![CDATA[
Parameters for performed action.<br>
For classmethod Type: classmethod,classname,arg1,...,argN<br>
For code Type: COS code. Recommended structure: Set st=##class(Some.Class).DoSomeThing(Args) Throw:('st) ##class(%Exception.StatusException).CreateFromStatus(st)"<br>]]></Description>
<Type>%String</Type>
</Property>

<Property name="Namespace">
<Description>
Namespace, to execute action.</Description>
<Type>%String</Type>
<InitialExpression>$Namespace</InitialExpression>
</Property>

<Method name="Execute">
<Description>
Executes Action specified.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Return:..Type="" $$$OK
	
	Set Namespace = $Namespace
	zn ..Namespace
	
	If (..Type="classmethod") {
		Set st = ..ExecuteClassMethod()
	} ElseIf (..Type="code") {
		Set st = ..ExecuteCode()
	}
	
	Zn Namespace
	Return st
]]></Implementation>
</Method>

<Method name="ExecuteClassMethod">
<Internal>1</Internal>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set class = $p(..Params,",",1)
	Set method = $p(..Params,",",2)
	Set args = $l(..Params,",") - 2
	For i=3:1:$l(..Params,",") {
		Set args(i-2)=$p(..Params,",",i)
	}
	Return $classmethod(class,method,args...)
]]></Implementation>
</Method>

<Method name="ExecuteCode">
<Description>
Copied from %SYS.Task.RunLegacyTask</Description>
<Internal>1</Internal>
<ProcedureBlock>0</ProcedureBlock>
<Implementation><![CDATA[
	Set $ZT="Error"
	Set Status=$$$OK
	X ..Params
	Quit $g(Status,$$$OK)
Error	;
	Set $ZT=""
	Quit $$$ERROR($$$GeneralError,$ze)
]]></Implementation>
</Method>

<Method name="%OnValidateObject">
<Description><![CDATA[
This callback method is invoked by the <METHOD>%ValidateObject</METHOD> method to 
provide notification that the current object is being validated.

<P>If this method returns an error then <METHOD>%ValidateObject</METHOD> will fail.]]></Description>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	If (..Type="classmethod"){
		Set length = $l(..Params,",")
		Return:length<2 $$$ERROR($$$GeneralError,"Params property must be a: classmethod,classname,arg1,...,argN")
	}
	
	Return:'##class(%SYS.Namespace).Exists(..Namespace) $$$ERROR($$$NamespaceUnavailable,..Namespace)
	Return $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<DataLocation>^CacheGitHubCI.ActionD</DataLocation>
<DefaultData>ActionDefaultData</DefaultData>
<IdLocation>^CacheGitHubCI.ActionD</IdLocation>
<IndexLocation>^CacheGitHubCI.ActionI</IndexLocation>
<State>ActionState</State>
<StreamLocation>^CacheGitHubCI.ActionS</StreamLocation>
<Data name="ActionDefaultData">
<Structure>listnode</Structure>
<Subscript>"1"</Subscript>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
<Data name="ActionState">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>Type</Value>
</Value>
<Value name="2">
<Value>Params</Value>
</Value>
<Value name="3">
<Value>Namespace</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
