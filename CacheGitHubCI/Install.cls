Class CacheGitHubCI.Install
{

/// See generated code in zsetup+1^CacheGitHubCI.Install.1
/// todo add optional parameter WEBAPP to Alter web app name if it needs to have another then namespace name
XData Install [ XMLNamespace = INSTALLER ]
{
<Manifest>
<If Condition='(##class(Config.Namespaces).Exists("${Namespace}")=0)'>
<Log Text="Creating namespace ${Namespace}" Level="0"/>
<Namespace Name="${Namespace}" Create="yes" Code="${Namespace}" Data="${Namespace}">
<Configuration>
<Database Name="${Namespace}" Dir="${MGRDIR}/${Namespace}" Create="yes" MountRequired="false" Resource="%DB_${Namespace}" PublicPermissions="RW" MountAtStartup="true"/>
</Configuration>
</Namespace>
 <Log Text="End Creating namespace ${Namespace}" Level="0"/>
</If>

<Namespace Name="${Namespace}" Create="no">
<IfDef Var="SourceDir">
<Log Text="SourceDir defined - offline install from ${SourceDir}" Level="0"/>
<Import File="${SourceDir}"/>
</IfDef>
<IfNotDef Var="SourceDir">
<Log Text="SourceDir undefined - online install from GitHub" Level="0"/>
<RunInstall Class="CacheGitHubCI.Install" Method="DownloadFromGitHub"/>
</IfNotDef>

<IfDef Var="IP">
<Log Text="IP set to ${IP} you can now create hooks." Level="0"/>
<RunInstall Class="CacheGitHubCI.Install" Method="SetIP"/>

<If Condition='(##class(Security.Applications).Exists("/cgci")=0)'>
	<Log Text="Creating web application /cgci" Level="0"/>
	<RunInstall Class="CacheGitHubCI.Install" Method="CreateWebApp"/>
</If>
</IfDef>

</Namespace>
</Manifest>
}

///  This is a method generator whose code is generated by XGL.
/// Set pVars("Namespace")="CGCI"
/// Set pVars("IP")="serverip:serverport"
/// do ##class(CacheGitHubCI.Install).setup(.pVars)
ClassMethod setup(ByRef pVars, pLogLevel As %Integer = 3, pInstaller As %Installer.Installer, pLogger As %Installer.AbstractLogger) As %Status [ CodeMode = objectgenerator, Internal ]
{
 	Quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "Install")
}

ClassMethod CreateWebApp(pVars, pLogLevel, tInstaller) As %Status
{
    Set Namespace=pVars("Namespace")

   	Set cspProperties("AutheEnabled") = 64 // Unauthenticated
   	Set cspProperties("MatchRoles") = ":" _ ..GetNSResource("%SYS") 
    Set cspProperties("NameSpace") = Namespace
    Set cspProperties("IsNameSpaceDefault") = 1
    Set cspProperties("DispatchClass")="CacheGitHubCI.REST"
    
    Do tInstaller.PushNS("%SYS")
    Set tSC = ##class(Security.Applications).Create("/cgci", .cspProperties)
    Do tInstaller.PopNS()
    If $$$ISERR(tSC) Throw ##class(%Installer.Exception).CreateFromStatus(tSC)
    quit $$$OK
}

/// Determine Namespace databease resource.
ClassMethod GetNSResource(Namespace As %String = "%SYS") As %String
{
	set ns = $Namespace
	zn "%SYS"
	do ##Class(Config.Namespaces).Get("%SYS",.Properties)
	set dbname = Properties("SysRoutines")
	Set rset = ##class(%ResultSet).%New("Config.Databases:List")
 	do rset.Execute(dbname)
	do rset.Next()
    set dbdir = rset.Data("Directory")
   	set db=##class(SYS.Database).%OpenId(dbdir)
   	set resname = db.ResourceName
   	kill (resname,ns)
   	zn ns
   	return resname
}

ClassMethod SetIP(pVars, pLogLevel, tInstaller) As %Status
{
    Set ^CacheGitHubCI("IP")=pVars("IP")
    quit $$$OK
}

ClassMethod GetBranch(pVars) As %Status
{
    Return $get(pVars("Branch"), "master")
}

ClassMethod GetRepository(pVars) As %Status
{
    Return $get(pVars("Repository"), "intersystems-ru")
}

ClassMethod DownloadFromGitHub(pVars, pLogLevel, tInstaller) As %Status
{
    Set Namespace=tInstaller.Evaluate("${Namespace}")
    Set Branch = ..GetBranch(.pVars)
    Set Repository = ..GetRepository(.pVars)
    Do tInstaller.PushNS("%SYS")
    Set tSC = ..Update(Namespace, Repository, "CacheGitHubCI", Branch)
    Do tInstaller.PopNS()
    If $$$ISERR(tSC) Throw ##class(%Installer.Exception).CreateFromStatus(tSC)
    quit $$$OK
}

/// Downloads and compiles GitHub repository.<br>
///  <b>Owner</b> - The name of the repository owner.<br>
///  <b>Repository</b> - The name of the repository.<br>
///  <b>Branch</b> - The name of the commit/branch/tag. If skipped the repository?s default branch (usually master) would be used.<br>
///  <b>Username</b> - GitHub user, who has access to repository. Optional for public repositories.<br>
///  <b>Password</b> - GitHub password, corresponding to Username. Optional for public repositories.<br>
///  Note, that with Username, you can make up to 5,000 requests per hour. 
///  For unauthenticated requests, the rate limit allows to make up to 60 requests per hour. 
///  Unauthenticated requests are associated with an IP address.<br>
///  <b>Namespace</b> - Namespace, where to download and compile repository.<br>
///  
///  For example in the repository: https://github.com/intersystems-ru/Cache-MDX2JSON<br>
///  Owner - intersystems-ru, Repository - Cache-MDX2JSON.<br> 
ClassMethod Update(Namespace = {$Namespace}, Owner As %String = "intersystems-ru", Repository As %String = "CacheGitHubCI", Branch As %String, Username As %String, Password As %String) As %Status
{
	Set namespace = $Namespace
 	Set SSLConfig = "GitHub"
 	
 	Zn "%SYS"
 	Do:'##class(Security.SSLConfigs).Exists(SSLConfig) ##class(Security.SSLConfigs).Create(SSLConfig)

 	Set req=##class(%Net.HttpRequest).%New()
 	Set req.Https=1
	Set req.SSLConfiguration=SSLConfig
	Set req.Server="api.github.com"
	Set req.Location = "repos/" _ Owner _ "/" _ Repository _ "/contents" 	// as described in https://developer.github.com/v3/repos/	
	Do:$d(Branch) req.SetParam("ref",Branch) 								// if omitted the repository?s default branch (usually master) would be used
	Do req.SetHeader("Accept","application/vnd.github.v3+json") 			// we want to receive API v3
	
	If ($d(Username) && $d(Password)) {										// supply Username and Passwor, if both are provided. GitHub accept Basic Auth
		Set req.Username = Username											// https://developer.github.com/v3/auth/
	 	Set req.Password = Password
	} 	

 	Set links = ##class(%ListOfDataTypes).%New()
 	Set st = ..ProcessDirectory("",.req,Branch,.links)
 	Return:$$$ISERR(st) st
 	 	
 	Zn Namespace
	Set st = ..DownloadFiles(links,req,.list)
	Set st2 = $system.OBJ.CompileList(.list)
	Zn namespace
	
 	Return $$$ADDSC(st, st2)
}

/// Process one directory of GitHub repository. Recursive.<br>
/// <b>Path</b> -Internal repository path. Root is empty string<br>
/// <b>Request</b> - Authenticated/Set %Net.HttpRequest object.<br>
/// <b>Links</b> - List of links to raw files (which satisfy <b>IsCacheFile</b> conditions) from repository.<br>
ClassMethod ProcessDirectory(Path As %String = "", Request As %Net.HttpRequest, Branch As %String = "", ByRef Links As %ListOfDataTypes) As %Status
{
	Set location = Request.Location
	Set Request.Location = Request.Location _ Path
	Do:(Branch'="") Request.SetParam("ref",Branch) 
	
	Set st = Request.Get()

	Return:$$$ISERR(st) st
	Return:(Request.HttpResponse.StatusCode = 404) $$$ERROR($$$GeneralError,"Repository doesn't exist OR you don't have access")
	Return:((Request.HttpResponse.StatusCode = 403) && (Request.HttpResponse.GetHeader("X-RATELIMIT-REMAINING")=0)) $$$ERROR($$$GeneralError,"API rate limit exceeded. Try logging in.")
 	Return:(Request.HttpResponse.StatusCode '= 200) $$$ERROR($$$GeneralError,"Received " _ Request.HttpResponse.StatusCode _ " expected 200")
 	
 	#dim objects As List of %ZEN.proxyObject
 	#dim obj As %ZEN.proxyObject
	Set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(Request.HttpResponse.Data,,.objects,1)
	Return:$$$ISERR(st) st
	
	For i = 1:1:objects.Count() {		
		Set obj = objects.GetAt(i)
		If (obj.type = "dir") {
			Set st = ..ProcessDirectory("/"_obj.name,Request,Branch,.Links)
			Return:$$$ISERR(st) st		
		} ElseIf (obj.type = "file") {
			Do:..IsCacheFile(obj) Links.Insert(obj."download_url")
		} Else {
			// obj.type = "symlink" or obj.type = "submodule"
		} 
	}
	Set Request.Location = location // to keep track of where in the repository tree we are
	Return $$$OK
}

/// Check that incoming file is the one you need.
/// See $$autoDetectType^%apiOBJ
ClassMethod IsCacheFile(File As %ZEN.proxyObject) As %Boolean
{
	Set extensions = ",xml,cls,csp,csr,mac,int,bas,inc,gbl,prj,obj,pkg,gof,gsa,go,gto,cdl,"
	Return:($L(File.name,".")=1) 0 //no extension
	Set File.Extension = $P(File.name,".",$L(File.name,"."))
	Return $F(extensions,","_$ZCVT(File.Extension,"l")_",")
}

/// Download list of files on https://raw.githubusercontent.com/ server.<br>
/// <b>Links</b> - List of links to raw files.<br>
/// <b>Request</b> - Authenticated/Set %Net.HttpRequest object.<br>
/// <b>loadedlist</b> - Returns an array of the items loaded. 
ClassMethod DownloadFiles(Links As %ListOfDataTypes, Request As %Net.HttpRequest, Output Items) As %Status
{
	Kill Items
	Set Request.Server = "raw.githubusercontent.com"
	Set st = $$$OK
	
	For i = 1:1:Links.Count() {
		Set streq = Request.Get($e(Links.GetAt(i),35,*)) // Remove "https://raw.githubusercontent.com/" from URL.	
		Set:$$$ISERR(streq) st=$$$ADDSC(st, streq)
 		Set stload = $system.OBJ.LoadStream(Request.HttpResponse.Data,"",.error,.items)
 		Set:$$$ISERR(stload) st=$$$ADDSC(st, stload)
 		Merge Items = items
	}
	
	Set Request.Server="api.github.com"
	Return st
}

}

