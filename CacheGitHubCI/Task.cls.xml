<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (Apple Mac OS X for x86-64) 2016.2 (Build 734U)" ts="2016-11-15 19:52:04">
<Class name="CacheGitHubCI.Task">
<Description>
Simple update task. Use CacheGitHubCI.Hook if you need more functionality.</Description>
<Super>%SYS.Task.Definition</Super>
<TimeChanged>64232,72067.917786</TimeChanged>
<TimeCreated>64232,70931.143606</TimeCreated>

<Parameter name="TaskName">
<Default>GitHubUpdateTask</Default>
</Parameter>

<Property name="GitHubURL">
<Description>
Repository URL, like https://github.com/intersystems-ru/Cache-MDX2JSON</Description>
<Type>%String</Type>
</Property>

<Property name="Username">
<Description><![CDATA[
GitHub user, who has access to repository. Optional for public repositories.<br>
Note, that with Username/Password, you can make up to 5,000 requests per hour. 
For unauthenticated requests, the rate limit allows to make up to 60 requests per hour. 
Unauthenticated requests are associated with an IP address.<br>
Required, if you want to create webhooks]]></Description>
<Type>%String</Type>
</Property>

<Property name="Password">
<Description>
GitHub password, corresponding to Username. Optional for public repositories.</Description>
<Type>%String</Type>
</Property>

<Property name="Branch">
<Type>%String</Type>
<InitialExpression>"master"</InitialExpression>
</Property>

<Property name="Namespace">
<Description>
Namespace, where to download and compile repository</Description>
<Type>%String</Type>
<InitialExpression>$Namespace</InitialExpression>
</Property>

<Property name="ConfigureActions">
<Description>
If no actions are defined for the hook representing this task and this flag is TRUE,
we will call ##class(CacheGitHubCGCI.ActionClassTemplate).SetupHook() to setup
default actions automatically.</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="ActionClassName">
<Type>%String</Type>
</Property>

<Property name="KeepBrokenSourceOnError">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $System.Status.OK()
	Try
	{		
		If '##class(%SYS.Namespace).Exists(..Namespace) 
		{
			Set tSC = $$$ERROR($$$NamespaceUnavailable,..Namespace)
			Quit
		}
	
		Set tOwner = $ZConvert($p(..GitHubURL,"/",4),"L")
		Set tRepository = $ZConvert($p(..GitHubURL,"/",5),"L")
		Set tNamespace = $ZConvert(..Namespace,"L")
		Set tHookId=tOwner_"||"_tRepository_"||"_tNamespace
		
		If ('##class(CacheGitHubCI.Hook).%ExistsId(tHookId)) 
		{
			Set hook = ##class(CacheGitHubCI.Hook).%New(tOwner,tRepository,..Branch,..Username,..Password,tNamespace,+..KeepBrokenSourceOnError)
			Quit:$System.Status.IsError(tSC)
		}
		Else
		{
			Set hook = ##class(CacheGitHubCI.Hook).%OpenId(tHookId)
			Set hook.Branch=..Branch
			Set hook.Username=..Username
			Set hook.Password=..Password
			Set hook.KeepBrokenSourceOnError=..KeepBrokenSourceOnError
		}
		
		Set tSC = hook.%Save()
		
		If (..ConfigureActions) && (hook.PostCompile.Type="") && (hook.PreCompile.Type="") && (hook.UnitTests.Type="") && (..ActionClassName'="")
		{
			Set tSC = ##class(CacheGitHubCI.ActionClassTemplate).SetupHookObj(hook, ..ActionClassName)
			Quit:$System.Status.IsError(tSC)
		}
		
		Set tSC = ##class(CacheGitHubCI.Hook).Update(tOwner,tRepository,tNamespace)
	}
	Catch (oException)
	{
		Set tSC = oException.AsStatus()
	}
	
	Quit tSC
]]></Implementation>
</Method>
</Class>
</Export>
