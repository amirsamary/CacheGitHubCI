<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="CacheGitHubCI.Hook">
<Description>
Hook tying GitHub repository and Cache Namespace.
Create instance of the class, create webhook or task for updates and save the instance.</Description>
<Super>%Persistent</Super>
<TimeCreated>63595,74765.029055</TimeCreated>

<Property name="Owner">
<Description>
The name of the repository owner.</Description>
<Type>%String</Type>
</Property>

<Property name="Repository">
<Description>
The name of the repository.</Description>
<Type>%String</Type>
</Property>

<Property name="Namespace">
<Description>
Namespace, where to download and compile repository</Description>
<Type>%String</Type>
<InitialExpression>$Namespace</InitialExpression>
</Property>

<Index name="Index">
<IdKey>1</IdKey>
<Properties>Owner,Repository,Namespace</Properties>
</Index>

<Property name="Branch">
<Description>
Repository branch, usually master. Leave empty, if you want to receive default branch.</Description>
<Type>%String</Type>
</Property>

<Property name="Username">
<Description><![CDATA[
GitHub user, who has access to repository. Optional for public repositories.<br>
Note, that with Username/Password, you can make up to 5,000 requests per hour. 
For unauthenticated requests, the rate limit allows to make up to 60 requests per hour. 
Unauthenticated requests are associated with an IP address.<br>
Required, if you want to create webhooks]]></Description>
<Type>%String</Type>
</Property>

<Property name="Password">
<Description>
GitHub password, corresponding to Username. Optional for public repositories.</Description>
<Type>%String</Type>
</Property>

<Property name="HookId">
<Description>
Id of GitHub webhook. Set with CreateHook method.</Description>
<Type>%String</Type>
</Property>

<Property name="TaskId">
<Description>
Id of Cache Task. Set with CreateTask method.</Description>
<Type>%String</Type>
</Property>

<Property name="Updates">
<Description>
Updates history</Description>
<Type>CacheGitHubCI.Update</Type>
<Collection>list</Collection>
</Property>

<Property name="PreCompile">
<Description>
What to do before compiling repository</Description>
<Type>CacheGitHubCI.Action</Type>
</Property>

<Property name="PostCompile">
<Description>
What to do after compiling repository</Description>
<Type>CacheGitHubCI.Action</Type>
</Property>

<Property name="UnitTests">
<Description>
What to do for Unit Testing</Description>
<Type>CacheGitHubCI.Action</Type>
</Property>

<Property name="LastUpdateDateTime">
<Description>
DateTime of latest update attempt</Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="LastUpdateStatus">
<Description><![CDATA[
Result of latest update attempt:<br> 
successful - update successful <br>
reverted  - update error, reverted to last successful commit ]]></Description>
<Type>%String</Type>
</Property>

<Method name="%OnNew">
<Description>
Set main variables, if provided.</Description>
<FormalSpec>Owner:%String,Repository:%String,Branch:%String,Username:%String,Password:%String,Namespace=$Namespace</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set:$d(Owner) ..Owner = $ZCVT(Owner,"l")
	Set:$d(Repository) ..Repository = Repository
	Set:$d(Namespace) ..Namespace = $ZCVT(Namespace,"l")
	Set:$d(Branch) ..Branch = Branch
	Set:$d(Username) ..Username = Username
	Set:$d(Password) ..Password = Password

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OwnerSet">
<FormalSpec>value:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set i%Owner=$ZCVT(value,"l")
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="RepositorySet">
<FormalSpec>value:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set i%Repository=$ZCVT(value,"l")
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="NamespaceSet">
<FormalSpec>value:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Quit:'##class(%SYS.Namespace).Exists(value) $$$ERROR($$$NamespaceUnavailable,..Namespace)
    Set i%Namespace=$ZCVT(value,"l")
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="CreateHook">
<Description>
Create GitHub webhook, if we have admin access to repository.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Return:$ISVALIDNUM(..HookId) $$$ERROR($$$GeneralError, "Hook already exists")
	Set HookId = ""
	Set st = ##class(CacheGitHubCI.GitHub).CreateHook(..Owner,..Repository, ..Username, ..Password, ..Namespace, .HookId)
	Return:$$$ISERR(st) st
	Set:$ISVALIDNUM(HookId) ..HookId = HookId
	Return $ISVALIDNUM(HookId)
]]></Implementation>
</Method>

<Method name="DeleteHook">
<Description>
Delete GitHub webhook, if one exists.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Return:(..HookId="") $$$ERROR($$$GeneralError, "Hook does not exist")
	Set st = ##class(CacheGitHubCI.GitHub).DeleteHook(..Owner,..Repository, ..Username, ..Password, ..HookId)
	Return:$$$ISERR(st) st
	Set ..HookId = ""
	Return $$$OK
]]></Implementation>
</Method>

<Method name="CreateTask">
<Description><![CDATA[
Create Cache task to update every <b>min</b> minutes]]></Description>
<FormalSpec>min:%Integer=60</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set task=##class(%SYS.Task).%New()
	Set task.Name = "Sync " _ ..Repository _ " into " _ ..Namespace
	Set task.NameSpace=$Namespace
	Set task.TimePeriod=0 // Daily
	Set task.TimePeriodEvery=1 // Every 1 day
	Set task.DailyFrequency=1 // Run Several times in a day
	Set task.DailyFrequencyTime=0 // Run every x minutes
	Set task.DailyIncrement=min // # of minutes between runs
	Set task.DailyStartTime = 0 // Start at 00:00:00
	Set task.DailyEndTime = 86399 // End at 23:59:59
	Set task.StartDate = $p($H,",",1) // Start today
	
	Set taskdef = ##class(CacheGitHubCI.Task).%New()
	Set taskdef.GitHubURL = "https://github.com/" _ ..Owner _ "/" _ ..Repository
	Set taskdef.Namespace = ..Namespace
	Do task.AssignSettings(taskdef)
	Set task.TaskClass=$classname(taskdef)
	
	Set st = task.%Save()
	Return:$$$ISERR(st) st
	Set ..TaskId = task.%Id()
	Return ##class(%SYS.Task).RunNow(..TaskId)
]]></Implementation>
</Method>

<Method name="DeleteTask">
<Description>
Delete update task</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set st = ##class(%SYS.Task).%DeleteId(..TaskId)
	Return:$$$ISERR(st) st
	Set ..TaskId = ""
	Return $$$OK
]]></Implementation>
</Method>

<Method name="Update">
<Description>
Check repository and update local namespace</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Owner:%String,Repository:%String,Namespace=$Namespace</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Return:'##class(%SYS.Namespace).Exists(Namespace) $$$ERROR($$$NamespaceUnavailable,Namespace)
	#dim hook As CacheGitHubCI.Hook
	Set hook = ..GetObject(Owner,Repository,Namespace)
		
	Set commit = ##class(%ZEN.proxyObject).%New()
	Set st = ##class(CacheGitHubCI.GitHub).GetLastCommit(hook.Owner,hook.Repository,hook.Branch,hook.Username,hook.Password,.commit)
	Return:$$$ISERR(st) st
	
	If ((hook.Updates.Count()>0) && (commit.sha = hook.Updates.GetPrevious("").Commit)) {	
		Set hook.LastUpdateDateTime = $ZDT($NOW(),3,1,2)
		Do hook.%Save()
		Return $$$OK
	}
	
	Set update = ##class(CacheGitHubCI.Update).%New(hook.%Id())
	Set update.Commit = commit.sha
	Set update.Author = commit.author.login
	Set update.URL = commit.url
	
	Set update.PreCompileStatus = hook.PreCompile.Execute()
	Set update.CompileStatus = ##class(CacheGitHubCI.GitHub).Update(hook.Owner,hook.Repository,hook.Branch,hook.Username,hook.Password,hook.Namespace)
	Set update.PostCompileStatus = hook.PostCompile.Execute()
	Set update.UnitTestsStatus = hook.UnitTests.Execute()
	
	Do hook.Updates.Insert(update)
	Do hook.%Save()
	
	Set st = $$$ADDSC($$$ADDSC($$$ADDSC(update.PreCompileStatus,update.CompileStatus),update.PostCompileStatus),update.UnitTestsStatus)
	If $$$ISERR(st) {
		Set hook.LastUpdateStatus = "Reverted"
		Set successcommit = ##class(CacheGitHubCI.Update).GetLastSuccessfulCommit(Owner,Repository,Namespace) 
		do hook.PreCompile.Execute()
		do ##class(CacheGitHubCI.GitHub).Update(hook.Owner,hook.Repository,successcommit,hook.Username,hook.Password,hook.Namespace)
		do hook.PostCompile.Execute()
		do hook.UnitTests.Execute()
	} Else {
		Set hook.LastUpdateStatus = "Successful"
	}
	
	Set hook.LastUpdateDateTime = $ZDT($NOW(),3,1,2)
	Do hook.%Save()
	JOB ##class(CacheGitHubCI.Cube).BuildCube()
	Return st
]]></Implementation>
</Method>

<Method name="GetObject">
<ClassMethod>1</ClassMethod>
<FormalSpec>Owner:%String,Repository:%String,Namespace=$Namespace</FormalSpec>
<ReturnType>CacheGitHubCI.Hook</ReturnType>
<Implementation><![CDATA[
	Set Owner = $ZCVT(Owner,"l")
	Set Repository = $ZCVT(Repository,"l")
	Set Namespace = $ZCVT(Namespace,"l")

	If (##class(CacheGitHubCI.Hook).%ExistsId(Owner_"||"_Repository_"||"_Namespace)) {
		Set hook = ##class(CacheGitHubCI.Hook).%OpenId(Owner_"||"_Repository_"||"_Namespace)
	} Else {
		Set hook=##class(CacheGitHubCI.Hook).%New()     
		Set hook.Namespace = Namespace                       
		Set hook.Owner = Owner            
		Set hook.Repository = Repository      
		Set hook.Branch = "master"                    
		Do hook.%Save()
	}
	Return hook
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^CacheGitHubCI.HookD</DataLocation>
<DefaultData>HookDefaultData</DefaultData>
<IdLocation>^CacheGitHubCI.HookD</IdLocation>
<IndexLocation>^CacheGitHubCI.HookI</IndexLocation>
<StreamLocation>^CacheGitHubCI.HookS</StreamLocation>
<Data name="HookDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Branch</Value>
</Value>
<Value name="3">
<Value>Username</Value>
</Value>
<Value name="4">
<Value>Password</Value>
</Value>
<Value name="5">
<Value>HookId</Value>
</Value>
<Value name="6">
<Value>Owner</Value>
</Value>
<Value name="7">
<Value>Repository</Value>
</Value>
<Value name="8">
<Value>Namespace</Value>
</Value>
<Value name="9">
<Value>Updates</Value>
</Value>
<Value name="10">
<Value>TaskId</Value>
</Value>
<Value name="11">
<Value>PreCompile</Value>
</Value>
<Value name="12">
<Value>PostCompile</Value>
</Value>
<Value name="13">
<Value>UnitTests</Value>
</Value>
<Value name="14">
<Value>PreCompileStatus</Value>
</Value>
<Value name="15">
<Value>PostCompileStatus</Value>
</Value>
<Value name="16">
<Value>UnitTestsStatus</Value>
</Value>
<Value name="17">
<Value>LastUpdateDateTime</Value>
</Value>
<Value name="18">
<Value>LastUpdateStatus</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
