<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (Apple Mac OS X for x86-64) 2016.2 (Build 734U)" ts="2016-11-22 18:03:49">
<Class name="CacheGitHubCI.Hook">
<Description>
Hook tying GitHub repository and Cache Namespace.
Create instance of the class, create webhook or task for updates and save the instance.</Description>
<Super>%Persistent</Super>
<TimeChanged>64244,64980.666665</TimeChanged>
<TimeCreated>64232,70929.929792</TimeCreated>

<Property name="Owner">
<Description>
The name of the repository owner.</Description>
<Type>%String</Type>
</Property>

<Property name="Repository">
<Description>
The name of the repository.</Description>
<Type>%String</Type>
</Property>

<Property name="Namespace">
<Description>
Namespace, where to download and compile repository</Description>
<Type>%String</Type>
<InitialExpression>$Namespace</InitialExpression>
</Property>

<Index name="Index">
<IdKey>1</IdKey>
<Properties>Owner,Repository,Namespace</Properties>
</Index>

<Property name="Branch">
<Description>
Repository branch, usually master. Leave empty, if you want to receive default branch.</Description>
<Type>%String</Type>
</Property>

<Property name="Username">
<Description><![CDATA[
GitHub user, who has access to repository. Optional for public repositories.<br>
Note, that with Username/Password, you can make up to 5,000 requests per hour. 
For unauthenticated requests, the rate limit allows to make up to 60 requests per hour. 
Unauthenticated requests are associated with an IP address.<br>
Required, if you want to create webhooks]]></Description>
<Type>%String</Type>
</Property>

<Property name="Password">
<Description>
GitHub password, corresponding to Username. Optional for public repositories.</Description>
<Type>%String</Type>
</Property>

<Property name="HookId">
<Description>
Id of GitHub webhook. Set with CreateHook method.</Description>
<Type>%String</Type>
</Property>

<Property name="TaskId">
<Description>
Id of Cache Task. Set with CreateTask method.</Description>
<Type>%String</Type>
</Property>

<Property name="Updates">
<Description>
Updates history</Description>
<Type>CacheGitHubCI.Update</Type>
<Collection>list</Collection>
</Property>

<Property name="PreCompile">
<Description>
What to do before compiling repository</Description>
<Type>CacheGitHubCI.Action</Type>
</Property>

<Property name="PostCompile">
<Description>
What to do after compiling repository</Description>
<Type>CacheGitHubCI.Action</Type>
</Property>

<Property name="UnitTests">
<Description>
What to do for Unit Testing</Description>
<Type>CacheGitHubCI.Action</Type>
</Property>

<Property name="LastUpdateDateTime">
<Description>
DateTime of latest update attempt</Description>
<Type>%TimeStamp</Type>
</Property>

<Property name="LastUpdateStatus">
<Description><![CDATA[
Result of latest update attempt:<br> 
successful - update successful <br>
reverted  - update error, reverted to last successful commit ]]></Description>
<Type>%String</Type>
</Property>

<Property name="KeepBrokenSourceOnError">
<Description>
Prevent reverting to the last successful commit in case of an error. It is not
always easy to revert. For instance, we could have run PostCompile code that 
could have touched the data to migrate data from one table to another. In those scenarios
we would want to keep everything as is to investigate what went wrong. 
Anyway, the default value of this property is FALSE so the old behaviour of reverting
is preserved for backward compatibility.</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Method name="%OnNew">
<Description>
Set main variables, if provided.</Description>
<FormalSpec>Owner:%String,Repository:%String,Branch:%String,Username:%String,Password:%String,Namespace=$Namespace,KeepBrokenSourceOnError:%Boolean=0</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set:$d(Owner) ..Owner = $ZCVT(Owner,"l")
	Set:$d(Repository) ..Repository = Repository
	Set:$d(Namespace) ..Namespace = $ZCVT(Namespace,"l")
	Set:$d(Branch) ..Branch = Branch
	Set:$d(Username) ..Username = Username
	Set:$d(Password) ..Password = Password
	Set ..KeepBrokenSourceOnError=KeepBrokenSourceOnError
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OwnerSet">
<FormalSpec>value:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set i%Owner=$ZCVT(value,"l")
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="RepositorySet">
<FormalSpec>value:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set i%Repository=$ZCVT(value,"l")
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="NamespaceSet">
<FormalSpec>value:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Quit:'##class(%SYS.Namespace).Exists(value) $$$ERROR($$$NamespaceUnavailable,..Namespace)
    Set i%Namespace=$ZCVT(value,"l")
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="CreateHook">
<Description>
Create GitHub webhook, if we have admin access to repository.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Return:$ISVALIDNUM(..HookId) $$$ERROR($$$GeneralError, "Hook already exists")
	Set HookId = ""
	Set st = ##class(CacheGitHubCI.GitHub).CreateHook(..Owner,..Repository, ..Username, ..Password, ..Namespace, .HookId)
	Return:$$$ISERR(st) st
	Set:$ISVALIDNUM(HookId) ..HookId = HookId
	Return $ISVALIDNUM(HookId)
]]></Implementation>
</Method>

<Method name="DeleteHook">
<Description>
Delete GitHub webhook, if one exists.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Return:(..HookId="") $$$ERROR($$$GeneralError, "Hook does not exist")
	Set st = ##class(CacheGitHubCI.GitHub).DeleteHook(..Owner,..Repository, ..Username, ..Password, ..HookId)
	Return:$$$ISERR(st) st
	Set ..HookId = ""
	Return $$$OK
]]></Implementation>
</Method>

<Method name="CreateTask">
<Description><![CDATA[
Create Cache task to update every <b>min</b> minutes]]></Description>
<FormalSpec>min:%Integer=60</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set task=##class(%SYS.Task).%New()
	Set task.Name = "Sync " _ ..Repository _ " into " _ ..Namespace
	Set task.NameSpace=$Namespace
	Set task.TimePeriod=0 // Daily
	Set task.TimePeriodEvery=1 // Every 1 day
	Set task.DailyFrequency=1 // Run Several times in a day
	Set task.DailyFrequencyTime=0 // Run every x minutes
	Set task.DailyIncrement=min // # of minutes between runs
	Set task.DailyStartTime = 0 // Start at 00:00:00
	Set task.DailyEndTime = 86399 // End at 23:59:59
	Set task.StartDate = $p($H,",",1) // Start today
	
	Set taskdef = ##class(CacheGitHubCI.Task).%New()
	Set taskdef.GitHubURL = "https://github.com/" _ ..Owner _ "/" _ ..Repository
	Set taskdef.Namespace = ..Namespace
	Do task.AssignSettings(taskdef)
	Set task.TaskClass=$classname(taskdef)
	
	Set st = task.%Save()
	Return:$$$ISERR(st) st
	Set ..TaskId = task.%Id()
	Return ##class(%SYS.Task).RunNow(..TaskId)
]]></Implementation>
</Method>

<Method name="DeleteTask">
<Description>
Delete update task</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set st = ##class(%SYS.Task).%DeleteId(..TaskId)
	Return:$$$ISERR(st) st
	Set ..TaskId = ""
	Return $$$OK
]]></Implementation>
</Method>

<Method name="Update">
<Description>
Check repository and update local namespace</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Owner:%String,Repository:%String,Namespace=$Namespace</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 	#dim hook As CacheGitHubCI.Hook
 	Set tSC = $System.Status.OK()
 	Try
 	{
		If '##class(%SYS.Namespace).Exists(Namespace) 
		{
			Set tSC = $$$ERROR($$$NamespaceUnavailable,Namespace)
			Quit
		}
	
	
		Set hook = ..GetObject(Owner,Repository,Namespace)
		
		Set lastCommit = ##class(%ZEN.proxyObject).%New()
		Set tSC = ##class(CacheGitHubCI.GitHub).GetLastCommit(hook.Owner,hook.Repository,hook.Branch,hook.Username,hook.Password,.lastCommit)
		Quit:$$$ISERR(tSC)
		
		If ((hook.Updates.Count()>0) && (lastCommit.sha = hook.Updates.GetPrevious("").Commit)) 
		{	
			// Our last commit is the same as the repository's last commit. We are up to date!
			// Let's just update the hook to indicate the last time we checked:
			Set hook.LastUpdateDateTime = $ZDT($NOW(),3,1,2)
			Set tSC = hook.%Save()
			Quit
		}
		//If we are here, that is because there are commits on GitHub that we don't have downloaded yet.

		Set update = ##class(CacheGitHubCI.Update).%New(hook.%Id())
		Set update.Commit = lastCommit.sha
		Set update.Author = lastCommit.author.login
		Set update.URL = lastCommit.url
		
		// Let's run the PreCompile code before we start downloading and compiling classes from github:
		Write !,"PreCompile()"
		Set update.PreCompileStatus = hook.PreCompile.Execute()
		If ('hook.KeepBrokenSourceOnError) || ($System.Status.IsOK(update.PreCompileStatus))
		{
			// If PreCompileStatus is OK or, if it isn't but we don't care, we can go on and/
			// start downloading stuff from github. The Update() method downloads and compiles everything:
			Write !,"Update()"
			Set update.CompileStatus = ##class(CacheGitHubCI.GitHub).Update(hook.Owner,hook.Repository,hook.Branch,hook.Username,hook.Password,hook.Namespace)
		}
		
		Write !,"CompileStatus: ",update.CompileStatus
		If ('hook.KeepBrokenSourceOnError) || ($System.Status.IsOK(update.CompileStatus))
		{
			Write !,"PostCompile()"
			// If CompileStatus is OK or, if it isn't but we don't care, we can execute PostCompile
			Set update.PostCompileStatus = hook.PostCompile.Execute()
		}
		
		Write !,"PostCompileStatus: ",update.PostCompileStatus
		If ('hook.KeepBrokenSourceOnError) || ($System.Status.IsOK(update.PostCompileStatus))
		{
			Write !,"UnitTests()"
			// If PostCompileStatus is OK or, if it isn't but we don't care, we can execute UnitTests
			Set update.UnitTestsStatus = hook.UnitTests.Execute()
		}
		
		Write !,"UnitTestsStatus: ",update.UnitTestsStatus
		
		Set tSC = hook.AddHookUpdate(update)
		Quit:$System.Status.IsError(tSC)
		
		Set tSC = $$$ADDSC($$$ADDSC($$$ADDSC(update.PreCompileStatus,update.CompileStatus),update.PostCompileStatus),update.UnitTestsStatus)
		If $$$ISERR(tSC) && ('hook.KeepBrokenSourceOnError)
		{
			//This is the old behaviour of revert to the last succesful commit.
			Set hook.LastUpdateStatus = "Reverted"
			Set successcommit = ##class(CacheGitHubCI.Update).GetLastSuccessfulCommit(Owner,Repository,Namespace) 
			do hook.PreCompile.Execute()
			do ##class(CacheGitHubCI.GitHub).Update(hook.Owner,hook.Repository,successcommit,hook.Username,hook.Password,hook.Namespace)
			do hook.PostCompile.Execute()
			do hook.UnitTests.Execute()
		} 
		ElseIf $$$ISERR(tSC) && (hook.KeepBrokenSourceOnError)
		{
			// This is the new alternate behaviour to simply leave the mess so someone can investigate
			// what went wrong.
			Set hook.LastUpdateStatus = "Unsuccessful and unreverted"
		}
		Else 
		{
			Set hook.LastUpdateStatus = "Successful"
		}
	
		Set hook.LastUpdateDateTime = $ZDT($NOW(),3,1,2)
		
		Set tSC = hook.%Save()
		Quit:$System.Status.IsError(tSC)
		
		JOB ##class(CacheGitHubCI.Cube).BuildCube()
	}
	Catch (oException)
	{
		Set tSC = oException.AsStatus()
	}
	
	Return tSC
]]></Implementation>
</Method>

<Method name="AddHookUpdate">
<FormalSpec>pUpdate:CacheGitHubCI.Update</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Do ..Updates.Insert(pUpdate)
	Set ..LastUpdateDateTime = $ZDT($NOW(),3,1,2)
	Quit ..%Save()
]]></Implementation>
</Method>

<Method name="GetObject">
<ClassMethod>1</ClassMethod>
<FormalSpec>Owner:%String,Repository:%String,Namespace=$Namespace</FormalSpec>
<ReturnType>CacheGitHubCI.Hook</ReturnType>
<Implementation><![CDATA[
	Set Owner = $ZCVT(Owner,"l")
	Set Repository = $ZCVT(Repository,"l")
	Set Namespace = $ZCVT(Namespace,"l")

	If (##class(CacheGitHubCI.Hook).%ExistsId(Owner_"||"_Repository_"||"_Namespace)) {
		Set hook = ##class(CacheGitHubCI.Hook).%OpenId(Owner_"||"_Repository_"||"_Namespace)
	} Else {
		Set hook=##class(CacheGitHubCI.Hook).%New()     
		Set hook.Namespace = Namespace                       
		Set hook.Owner = Owner            
		Set hook.Repository = Repository      
		Set hook.Branch = "master"                    
		Do hook.%Save()
	}
	Return hook
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^CacheGitHubCI.HookD</DataLocation>
<DefaultData>HookDefaultData</DefaultData>
<IdLocation>^CacheGitHubCI.HookD</IdLocation>
<IndexLocation>^CacheGitHubCI.HookI</IndexLocation>
<StreamLocation>^CacheGitHubCI.HookS</StreamLocation>
<Data name="HookDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Branch</Value>
</Value>
<Value name="3">
<Value>Username</Value>
</Value>
<Value name="4">
<Value>Password</Value>
</Value>
<Value name="5">
<Value>HookId</Value>
</Value>
<Value name="6">
<Value>Owner</Value>
</Value>
<Value name="7">
<Value>Repository</Value>
</Value>
<Value name="8">
<Value>Namespace</Value>
</Value>
<Value name="9">
<Value>Updates</Value>
</Value>
<Value name="10">
<Value>TaskId</Value>
</Value>
<Value name="11">
<Value>PreCompile</Value>
</Value>
<Value name="12">
<Value>PostCompile</Value>
</Value>
<Value name="13">
<Value>UnitTests</Value>
</Value>
<Value name="14">
<Value>PreCompileStatus</Value>
</Value>
<Value name="15">
<Value>PostCompileStatus</Value>
</Value>
<Value name="16">
<Value>UnitTestsStatus</Value>
</Value>
<Value name="17">
<Value>LastUpdateDateTime</Value>
</Value>
<Value name="18">
<Value>LastUpdateStatus</Value>
</Value>
<Value name="19">
<Value>KeepBrokenSourceOnError</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
